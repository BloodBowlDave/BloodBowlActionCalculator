@{
    var playerId = Guid.NewGuid();
    var playerNumber = 1;
}

@if (Calculation.PlayerActions.Any())
{
    <MudDivider Style="Margin:10px 0 10px 0" DividerType="DividerType.Middle"/>

    <h3>Calculation - @Calculation.PlayerActions.ToString()</h3>

    <MudGrid Spacing="1" Class="calculation-summary">
        
        @for (var i = 0; i < Calculation.PlayerActions.Count; i++)
        {
            var playerAction = Calculation.PlayerActions[i];

            if (playerAction.Player.Id != playerId)
            {
                playerId = playerAction.Player.Id;

                <PlayerSummary Player="@playerAction.Player" PlayerNumber="playerNumber"/>

                playerNumber++;
            }

            var index = i;

            <ActionSummary 
                PlayerAction="@playerAction"
                Index="@i"
                LastActionType="@PreviousActionType(index)"
                PenultimateActionType="@PenultimateActionType(index)"
                RemoveAction="RemoveAction"
                OnToggleBreakTackle="OnToggleBreakTackle"
                OnToggleDivingTackle="OnToggleDivingTackle"
                OnToggleBrawler="OnToggleBrawler"
                OnTogglePro="OnTogglePro"
                OnToggleRerollInaccurate="OnToggleRerollInaccurate"
                OnToggleRerollFailure="OnToggleRerollFailure"
                OnSuccessesChanged="OnSuccessesChanged"/>
        }
        
    </MudGrid>
}

@code {

    [Parameter] 
    public Calculation Calculation { get; set; } = null!;

    [Parameter]
    public EventCallback<Tuple<int, bool>> OnToggleBreakTackle { get; set; } 

    [Parameter]
    public EventCallback<Tuple<int, bool>> OnToggleDivingTackle { get; set; } 

    [Parameter]
    public EventCallback<Tuple<int, bool>> OnToggleBrawler { get; set; } 

    [Parameter]
    public EventCallback<Tuple<int, bool>> OnTogglePro { get; set; } 

    [Parameter]
    public EventCallback<Tuple<int, bool>> OnToggleRerollInaccurate { get; set; } 

    [Parameter]
    public EventCallback<Tuple<int, bool>> OnToggleRerollFailure { get; set; } 

    [Parameter]
    public EventCallback<Tuple<int, int>> OnSuccessesChanged { get; set; } 

    [Parameter]
    public EventCallback<int> RemoveAction { get; set; }

    private ActionType? PreviousActionType(int i) => i > 0 ? Calculation.PlayerActions[i - 1].Action.ActionType : null;

    private ActionType? PenultimateActionType(int i) => i > 1 ? Calculation.PlayerActions[i -2].Action.ActionType : null;
}
