@{
    var playerId = Guid.NewGuid();
    var playerNumber = 1;
    var i = 0;
}

@if (Calculation.PlayerActions.Any())
{
    <MudDivider Style="Margin:10px 0 10px 0" DividerType="DividerType.Middle"/>

    <MudGrid Spacing="1" Class="calculation-summary">

        @foreach (var playerAction in Calculation.PlayerActions)
        {
            if (playerAction.Player.Id != playerId)
            {
                playerId = playerAction.Player.Id;

                <PlayerSummary Player="@playerAction.Player" PlayerNumber="playerNumber"/>

                playerNumber++;
            }

            <ActionSummary 
                PlayerAction="@playerAction"
                Index="@i"
                RemoveAction="RemoveAction"
                OnToggleBreakTackle="OnToggleBreakTackle"
                OnToggleDivingTackle="OnToggleDivingTackle"
                OnToggleBrawler="OnToggleBrawler"
                OnTogglePro="OnTogglePro"
                OnToggleRerollInaccurate="OnToggleRerollInaccurate"
                OnToggleRerollFailure="OnToggleRerollFailure"/>

            i++;
        }
        
    </MudGrid>
}

@code {

    [Parameter] 
    public Calculation Calculation { get; set; } = null!;
    
    [Parameter]
    public EventCallback<Tuple<int, bool>> OnToggleBreakTackle { get; set; } 

    [Parameter]
    public EventCallback<Tuple<int, bool>> OnToggleDivingTackle { get; set; } 

    [Parameter]
    public EventCallback<Tuple<int, bool>> OnToggleBrawler { get; set; } 

    [Parameter]
    public EventCallback<Tuple<int, bool>> OnTogglePro { get; set; } 

    [Parameter]
    public EventCallback<Tuple<int, bool>> OnToggleRerollInaccurate { get; set; } 

    [Parameter]
    public EventCallback<Tuple<int, bool>> OnToggleRerollFailure { get; set; } 

    [Parameter]
    public EventCallback<int> RemoveAction { get; set; }
}
