@using ActionCalculator.Models
@using Microsoft.AspNetCore.Components

@{
    var playerId = Guid.NewGuid();
    var playerNumber = 1;
}

@if (Calculation.PlayerActions.Any())
{
    <MudGrid Spacing="1" Class="calculation-summary">

        @foreach (var playerAction in Calculation.PlayerActions)
        {
            if (playerAction.Player.Id != playerId)
            {
                playerId = playerAction.Player.Id;

                <PlayerSummary Player="@playerAction.Player" PlayerNumber="playerNumber"/>

                playerNumber++;
            }

            <ActionSummary PlayerAction="@playerAction" RemoveAction="RemoveAction"/>
        }
        
    </MudGrid>

    <MudDivider Style="Margin:10px 0 10px 0" DividerType="DividerType.Middle"></MudDivider>
        
    <MudPaper Class="calculation-container">
        <h4>Calculation - @(Calculation.PlayerActions.ToString())</h4>
        <MudNumericField T="int" Min="0" Max="8" Label="Rerolls" Value="Calculation.Rerolls" ValueChanged="@(RerollsChanged)"/>
        <MudButton OnClick="SaveCalculation">Save</MudButton>
        <MudButton OnClick="ClearCalculation">Clear</MudButton>
    </MudPaper>
}

@code {

    [Parameter] 
    public Calculation Calculation { get; set; } = null!;

    [Parameter]
    public EventCallback<Calculation> CalculationChanged { get; set; }

    [Parameter]
    public EventCallback<int> RemoveAction { get; set; }

    private void RerollsChanged(int i)
    {
        Calculation.Rerolls = i;
        CalculationChanged.InvokeAsync(Calculation);
    }

    private void SaveCalculation()
    {

    }

    private void ClearCalculation()
    {
        Calculation = new Calculation(new PlayerActions(), Calculation.Rerolls);
        CalculationChanged.InvokeAsync(Calculation);
    }
}
