@using ActionCalculator.Utilities

<MudItem>
    <MudPaper>
        <h5>Block</h5>
        
        <MudNumericField T="int" Min="MinimumDice" Max="MaximumDice ?? 1" 
                         Value="NumberOfDice" 
                         ValueChanged="@(NumberOfDiceChanged)" Label="Dice" Disabled="Disabled"/>
        <MudNumericField T="int" Min="1" Max="5" @bind-Value="_numberOfSuccesses" Label="Successes" Disabled="Disabled"/>
        <MudButton Variant="Variant.Outlined" OnClick="AddAction" Disabled="Disabled">Add</MudButton>
    </MudPaper>
</MudItem>

@code {
    private int _numberOfDice = 1;

    private int NumberOfDice
    {
        get
        {
            var numberOfDice = _numberOfDice.ThisOrMinimum(MinimumDice).ThisOrMaximum(MaximumDice ?? 1);
            _numberOfDice = numberOfDice;
            return numberOfDice;
        }
        set => _numberOfDice = value;
    }

    private int _numberOfSuccesses = 2;
    private int _previousNumberOfDice;

    [Parameter]
    public EventCallback<Action> OnAddAction { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public int MinimumDice { get; set; }

    [Parameter]
    public int? MaximumDice { get; set; }
    
    private void NumberOfDiceChanged(int i)
    {
        _previousNumberOfDice = NumberOfDice;
        NumberOfDice = i;

        if (i is not (0 or -1))
        {
            return;
        }

        NumberOfDice = _previousNumberOfDice > 0 ? -2 : 1;
    }

    private void AddAction()
    {
        OnAddAction.InvokeAsync(new Models.Actions.Block(NumberOfDice, 
            _numberOfSuccesses, 0, false, false, true));
    }
}