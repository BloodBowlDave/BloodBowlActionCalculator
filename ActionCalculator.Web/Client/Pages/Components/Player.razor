@using ActionCalculator.Models
@using ActionCalculator.Utilities
@using System.Linq

<MudPaper>
    
    <MudChipSet MultiSelection="true" Filter="false" @bind-SelectedChips="_selected">
        @foreach (var skill in GetSkills())
        {   
            <MudChip 
                Text="@skill.ToString()" 
                Variant="Variant.Text"
                Color="Color.Default" 
                SelectedColor="Color.Primary">
            </MudChip>

            @if (skill == Skills.Loner)
            {
                <div hidden="@(!SkillIsSelected("Loner"))" class="skill-input">
                    <MudNumericField T="int" Min="2" Max="6" @bind-Value="_lonerValue"></MudNumericField>
                </div>
            }
            else if (skill == Skills.MightyBlow)
            {
                <div hidden="@(!SkillIsSelected("MightyBlow"))" class="skill-input">
                    <MudNumericField T="int" Min="1" Max="2" @bind-Value="_mightyBlowValue"></MudNumericField>
                </div>
            }
            else if (skill == Skills.DirtyPlayer)
            {
                <div hidden="@(!SkillIsSelected("DirtyPlayer"))" class="skill-input">
                    <MudNumericField T="int" Min="1" Max="2" @bind-Value="_dirtyPlayerValue"></MudNumericField>
                </div>
            }
            else if (skill == Skills.BreakTackle)
            {
                <div hidden="@(!SkillIsSelected("BreakTackle"))" class="skill-input">
                    <MudNumericField T="int" Min="1" Max="2" @bind-Value="_breakTackleValue"></MudNumericField>
                </div>
            }
        }
    </MudChipSet>
    
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NewPlayer">New Player</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ClearSelected">Clear</MudButton>
</MudPaper>

<style type="text/css">
    .skill-input .mud-input {
        margin-top: 0 !important;
    }

    .skill-input .mud-input-control {
        margin-top: 0;
    }
</style>

@code {

    int _lonerValue;
    int _mightyBlowValue;
    int _dirtyPlayerValue;
    int _breakTackleValue;

    Guid _playerId;
    MudChip[] _selected;
    
    private IEnumerable<Skills> GetSkills() => 
        typeof(Skills).ToEnumerable<Skills>().Where(x => x is > 0 and < Skills.DivingTackle);

    private bool SkillIsSelected(string skill) => _selected.Any(x => x.Text == skill);

    private void ClearSelected()
    {
        _selected = Array.Empty<MudChip>();
    }

    private void NewPlayer()
    {
        _playerId = Guid.NewGuid();
        ClearSelected();
    }
}
